import math
import scipy.stats as stats
import numpy as np

# На препарате А положительный результат лечения наблюдается у 17 из 32 пациентов, а
# на препарате В у 9 из 22. Построить 95% доверительный интервал для разности долей.
#  Обнаружены ли статистически значимые различия
p_A = 17/32
n_A = 32
p_B = 9/22
n_B = 22
a = 0.05

# Расчет стандартной ошибки разности долей:
SE = math.sqrt((p_A * (1 - p_A) / n_A) + (p_B * (1 - p_B) / n_B))
# SE = sqrt[ (p_A * (1 - p_A) / n_A) + (p_B * (1 - p_B) / n_B) ]

z_crit = stats.norm.ppf(1 - a / 2)
print(z_crit)

# 4. Построение доверительного интервала:
# Доверительный интервал = (p_A - p_B) ± Z * SE
confidence_interval = ((p_A - p_B) - z_crit * SE, (p_A - p_B) + z_crit * SE)
print(confidence_interval)

# Так как доверительный интервал включает 0, это говорит о том, что *статистически значимых
# различий между препаратами А и В не обнаружено* на уровне значимости 0.05.
# Разница в долях может быть обусловлена случайной изменчивостью.
# Данные
n_A = 32  # Размер выборки для препарата A
x_A = 17  # Количество успехов (положительный результат) для препарата A
n_B = 22  # Размер выборки для препарата B
x_B = 9   # Количество успехов (положительный результат) для препарата B
alpha = 0.05  # Уровень значимости

# Вычисление долей
p_A = x_A / n_A
p_B = x_B / n_B

# Вычисление объединенной доли
p_pooled = (x_A + x_B) / (n_A + n_B)

# Вычисление стандартной ошибки разности долей
SE = math.sqrt(p_pooled * (1 - p_pooled) * (1/n_A + 1/n_B))

# Вычисление z-статистики
z_statistic = (p_A - p_B) / SE
print(f' z {z_statistic}')

# Вычисление p-значения (двусторонний тест)
p_value = 2 * (1 - stats.norm.cdf(abs(z_statistic)))
print(stats.norm.cdf(abs(z_statistic)))
print(p_value)

# Проверка гипотезы
print(f"Z-статистика: {z_statistic:.3f}")
print(f"P-значение: {p_value:.3f}")

if p_value < alpha:
    print("Различия между долями статистически значимы (отвергаем нулевую гипотезу).")
else:
    print("Различия между долями не являются статистически значимыми (не отвергаем нулевую гипотезу).")

# Было проведено исследование научных статей на количество авторов в разные годы.
# Построить 90% и 95% интервалы

data = {
    1946: {'n': 151, 'mean': 2, 'std': 1.4},
    1956: {'n': 149, 'mean': 2.3, 'std': 1.6},
    1966: {'n': 157, 'mean': 2.8, 'std': 1.2},
    1976: {'n': 155, 'mean': 4.9, 'std': 7.3}
}

alpha_90 = 0.1
alpha_95 = 0.05

for year, values in data.items():
    n = values['n']
    mean = values['mean']
    std = values['std']
    print(year,values)

    # Степень свободы
    df = n - 1

    # Критические значения t-распределения
    t_90 = stats.t.ppf(1 - alpha_90 / 2, df)
    t_95 = stats.t.ppf(1 - alpha_95 / 2, df)

    # Стандартная ошибка среднего
    sem = std / np.sqrt(n)

    # Границы доверительных интервалов
    lower_90 = mean - t_90 * sem
    upper_90 = mean + t_90 * sem
    lower_95 = mean - t_95 * sem
    upper_95 = mean + t_95 * sem

    print(f"Год: {year}")
    print(f"  90% доверительный интервал: ({lower_90:.2f}, {upper_90:.2f})")
    print(f"  95% доверительный интервал: ({lower_95:.2f}, {upper_95:.2f})")
    print("-" * 20)

#  С помощью 90% доверительного интервала оценить средний вес нормально
# распределенной популяции, если дисперсия генеральной совокупности 3.6, а среднее
# арифметичекое по выборке объемом 100 получилось равным 71.2.

# Данные
population_variance = 3.6
sample_mean = 71.2
sample_size = 100
confidence_level = 0.90

# Стандартное отклонение
standard_deviation = population_variance**0.5

# Стандартная ошибка среднего
standard_error = standard_deviation / (sample_size**0.5)

# Критическое значение z
z_critical = stats.norm.ppf((1 + confidence_level) / 2)

# Границы доверительного интервала
margin_of_error = z_critical * standard_error
lower_bound = sample_mean - margin_of_error
upper_bound = sample_mean + margin_of_error

print(f"90% Доверительный интервал: ({lower_bound:.2f}, {upper_bound:.2f})")

# Найдите 95% доверительные интервалы для долей больных, которые не чувствовали боли
# при включенном и выключенном приборе. Можно ли по этим интервалам оценить
# статистическую значимость различий? при выключенном приборе боль у 3, без боли 17,
# а при включенном приборе с болью 6, без боли 24

zd = 17
b = 3
n = 20
p = zd / n
st_er = math.sqrt(p*(1-p)/n)
z_k= stats.norm.ppf(0.975)
pogr = z_k*st_er
dav_int = [p - pogr, p +pogr]
print(dav_int)
zd1 = 24
b1 = 6
n1 = 30
p1 = zd1 / n1
st_er1 = math.sqrt(p1*(1-p1)/n)
z_k1= stats.norm.ppf(0.975)
pogr1 = z_k1*st_er1
dav_int1 = [p1 - pogr1, p1 + pogr1]
print(dav_int1)
print(f"Доверительные интервалы для включенного и выключенного приборов *перекрываются*.  "
      f"Верхняя граница интервала для выключенного прибора (1.007, округлённая до 1)  "
      f"и нижняя граница интервала для включенного прибора (0.64)  пересекаются. "
      f"Это указывает на то, что различие между долями *вероятно, не статистически значимо*.  ")

# Сначала вычисляем объединенную выборочную долю:
# p̂ = (x₁ + x₂) / (n₁ + n₂) = (17 + 24) / (20 + 30) = 41/50 = 0.82
p3 = (zd+zd1) / (n+n1)
print(p3)
# Затем вычисляем z-статистику:
# z = (p̂₁ - p̂₂) / √[p̂(1 - p̂)(1/n₁ + 1/n₂)] = (0.85 - 0.8) / √[0.82 * 0.18 * (1/20 + 1/30)]
# z ≈ 0.05 / √(0.1476 * 0.0833) ≈ 0.05 / 0.111 ≈ 0.45
print(p,p1)
z3 = (p-p1) / math.sqrt(p3*(1-p3)*(1/n+1/n1))
print(z3)
print(0.45/2)
z_score = 0.45
p_value_one_tailed = stats.norm.sf(z3)  # Односторонний тест (правый хвост)
p_value_two_tailed = 2 * p_value_one_tailed # Двусторонний тест

print(f"Одностороннее p-значение (правый хвост): {p_value_one_tailed:.3f}")
print(f"Двустороннее p-значение: {p_value_two_tailed:.3f}")
# Заключение:  Как z-тест, так и анализ доверительных интервалов указывают на отсутствие
# статистически значимого различия в долях пациентов без боли при включенном и выключенном приборах.
# P-значение из z-теста предоставляет более точную количественную оценку этой неопределенности.
# Задача  Даны две группы студентов. В каждой по 21 человеку. Первая группа прошла недельную
# подготовку для сдачи тестов, другая группа приступила к тестам без подготовки.
#  В 1й группе среднее время прохождения теста целиком требует 1.8 ч, во второй 2.3 ч.
# Постройте 95% интервал для разности средних арифметических, если известно, что
# стандартное отклонение 1 группы составило 0.4 ч, во 2й группе -0.6ч
import numpy as np
from scipy import stats

# Данные
n1 = 21  # Размер первой группы
n2 = 21  # Размер второй группы
mean1 = 1.8  # Среднее время первой группы
mean2 = 2.3  # Среднее время второй группы
sd1 = 0.4  # Стандартное отклонение первой группы
sd2 = 0.6  # Стандартное отклонение второй группы
confidence_level = 0.95  # Уровень доверия

# Стандартная ошибка разности средних
se_diff = np.sqrt((sd1**2 / n1) + (sd2**2 / n2))

# Z-критическое значение для 95% доверия (двусторонний тест)
z_critical = stats.norm.ppf(1 - (1 - confidence_level) / 2)


# Предел погрешности
margin_of_error = z_critical * se_diff

# Доверительный интервал
confidence_interval = (mean1 - mean2 - margin_of_error, mean1 - mean2 + margin_of_error)

print(f"95% Доверительный интервал для разности средних: {confidence_interval}")

# Даны значения проницаемости сосудов сетчатки gr1(здоровые пациенты), gr 2 (поражения в
# области центральной ямки), gr 3 ( в области центральной ямки и на перефирии)
#  gr1=np.array([0.5, 0.7, 1, 1.2, 1.4])
#  gr2= np.array([1.3, 1.45, 1.6, 1.7, 1.8])
#  gr3=np.array([6.2, 12.6, 13.2, 14.1, 14.2])
#  Сравнить данные, относящиеся к разным видам поражений
gr1=np.array([0.5, 0.7, 1, 1.2, 1.4])
gr2= np.array([1.3, 1.45, 1.6, 1.7, 1.8])
gr3=np.array([6.2, 12.6, 13.2, 14.1, 14.2])
from scipy.stats import mannwhitneyu
from statsmodels.sandbox.stats.multicomp import multipletests

alpha = 0.05

comparisons = [
    (gr1, gr2),
    (gr1, gr3),
    (gr2, gr3)
]

p_values = []
for group1, group2 in comparisons:
    statistic, p_value = mannwhitneyu(group1, group2)
    p_values.append(p_value)

reject, corrected_p_values, _, _ = multipletests(p_values, method='bonferroni')

print("Попарные сравнения (критерий Манна-Уитни с поправкой Бонферрони):")
for i, (group1, group2) in enumerate(comparisons):
    print(f"Группа {group1.mean():.2f} vs Группа {group2.mean():.2f}: "
          f"p-значение = {corrected_p_values[i]:.3f}, Отвергаем нулевую гипотезу: {reject[i]}")

x1 = [47,90,75]
x2 = [58,60,77]
print(stats.mannwhitneyu(x1,x2))
