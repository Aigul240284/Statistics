import scipy.stats as stats
import numpy as np

# Известно, что генеральная совокупность распределена нормально со средним
#  квадратическим отклонением, равным 16. Найти доверительный интервал для
#  оценки математического ожидания a с надежностью 0.95, если выборочная
#  средняя M=80, а объем выборки n=256.
s = 16
a = 0.05
M = 80
n = 256
# КритическоезначениедляZ-распределения
z_crit = stats.norm.ppf(1 - a / 2)
print(z_crit, 1-a)
t1=stats.t.ppf(0.975,9)
#Рассчетстандартнойошибки
standard_error=s/np.sqrt(n)
#допустимый предел_ошибки
margin_of_error = z_crit * standard_error
# Доверительныйинтервал
confidence_interval=(M-margin_of_error,M+margin_of_error)
print(f"Задача 1 -доверительный интервал:{confidence_interval}")

# Задача2.
# Врезультате10независимых измерений некоторой величиныX, выполненныхс
# одинаковойточностью, полученыопытные данные: 6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1
# Предполагая, что результаты измерений подчинены нормальному закону распределения
# вероятностей, оценить истинное значение величины X при помощи доверительного
# интервала, покрывающего это значение с доверительной вероятностью 0, 95
x=[6.9, 6.1, 6.2, 6.8, 7.5, 6.3, 6.4, 6.9, 6.7, 6.1]
a=0.05
n=len(x)
# Среднеезначение и стандартное отклонение выборки
mx=np.mean(x)
std_dev_X=np.std(x,ddof=1)
#Критическоезначениедляt-распределения
t_crit=stats.t.ppf(1-a/2,df=n-1)
# Рассчет стандартной ошибки
standard_error = std_dev_X / np.sqrt(n)

#допустимый предел_ошибки
margin_of_error = t_crit * standard_error
# Доверительный интервал
confidence_interval = (mx- margin_of_error, mx + margin_of_error)
print(f"задача 2 - доверительный интервал: {confidence_interval}")
# Задача 3.
# Рост дочерей 175, 167, 154, 174, 178, 148, 160, 167, 169, 170 Рост матерей 178, 165,
# 165, 173, 168, 155, 160, 164, 178, 175 Используя эти данные построить 95%
# доверительный интервал для разности среднего роста родителей и детей.

d = [175,167,154,174,178,148,160,167,169, 170]
m = [178,165,165,173,168,155,160,164,178,175]
a = 0.05
n_d = len(d)
n_m = len(m)
#Средние значения и дисперсии
m_d = np.mean(d)
m_m = np.mean(m)
var_m=np.var(m,ddof=1)
var_d=np.var(d,ddof=1)
#Объединённая дисперсия
pooled_variance=((n_m-1)*var_m+(n_d-1)* var_d)/(n_m+n_d-2)
# Критическоезначениедляt-распределения
t_crit = stats.t.ppf(1 - a / 2, df=n_d + n_m - 2)
#Рассчет стандартной ошибки разности средних
standard_error_diff=np.sqrt(pooled_variance*(1/n_d+1/n_m))
#Доверительный интервал
margin_of_error=t_crit*standard_error_diff
confidence_interval=(m_m-m_d-margin_of_error, m_m-m_d+ margin_of_error)
print(f"Задача 3 - доверительный интервал для разности средних: {confidence_interval}")


